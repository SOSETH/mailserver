############################################################################
########### Managed by ansible (role: mailserver), do not edit! ############
############################################################################

{% if mailserver_behind_proxy %}
relayhost = [{{ mailserver_proxy_name }}]:{{ mailserver_proxy_port }}
{% endif %}

{% if ansible_distribution_release == "stretch" %}
# Don't crash on Debian stretch
shlib_directory = /usr/lib/postfix

{% endif %}
# Config file version
compatibility_level = 2

# Queue instead of bounce?
soft_bounce = no

# Defaults preserved
queue_directory = /var/spool/postfix
command_directory = /usr/sbin
data_directory = /var/lib/postfix
{% if ansible_distribution == 'Ubuntu' or ansible_distribution_release == "stretch" %}
daemon_directory = /usr/lib/postfix/sbin
{% else %}
daemon_directory = /usr/lib/postfix
{% endif %}
mail_owner = postfix
default_privs = nobody
unknown_local_recipient_reject_code = 550

# How is this system called as seen from The Internetâ„¢?
myhostname = {{ mailserver_hostname }}
mydomain = {{ mailserver_domain }}
myorigin = $mydomain
smtpd_banner = {{ mailserver_smtpd_banner }}

# Listen on all interfaces
inet_interfaces = all
# Listen on IPv4 and IPv6
inet_protocols = ipv4, ipv6
# No proxy interface atm
#proxy_interfaces =

# Which domain can this machine consider itsself the destination for (excluding virtual domains)?
mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain

# Which domains are 'virtual' domains, that is domains that this machine is additionally responsible
# for. See http://www.postfix.org/VIRTUAL_README.html#virtual_alias as for how this is supposed to
# work.
virtual_alias_domains = mysql:/etc/postfix/mysql-vdomains.cf

# Only relay mail for localhost
mynetworks_style = host

# Flow control: 1s * 100 SMTPD instances maximum = 100 Mails/sec
in_flow_delay = 1s

# The difference between mailbox_transport_maps and transport_maps is
# that transport_maps will also apply when sending mails!
mailbox_transport_maps = mysql:/etc/postfix/mysql-transport.cf

# Path to system SSL certificate store
smtp_tls_CApath = {{ mailserver_tls_base }}

# We need SSL certs. Replace the dummy certs with real ones in prod!
smtpd_tls_cert_file = /etc/postfix/server.pem
smtpd_tls_key_file = /etc/postfix/server.key

# Present self-signed client certificate when asked. This (in theory) allows
# remote servers to 'sticky' this client. Exchange does this per default, so it
# should be safe...
smtp_tls_cert_file = /etc/postfix/client.pem
smtp_tls_key_file = /etc/postfix/client.key

# Ask for client cert (does not matter if none is provided)
smtpd_tls_ask_ccert = yes

# Add header that tells if and how the connection was encrypted
smtpd_tls_received_header = yes

# Announce TLS to everybody
smtpd_tls_security_level = may

# Configure supported cipher suites
smtpd_tls_protocols = {{ mailserver_ssl_tlsver|replace(" ", ", ") }}
smtp_tls_protocols = {{ mailserver_ssl_tlsver|replace(" ", ", ") }}
smtpd_tls_mandatory_ciphers = high
smtp_tls_mandatory_ciphers = high
tls_high_cipherlist = {{ mailserver_ssl_tlsciphers }}

# Accept client logins only over encrypted connections
smtpd_tls_auth_only = yes

# In postfix-speak, 512 bits means export and 1024 bits non-export parameters
smtpd_tls_dh1024_param_file = /etc/postfix/dh-2048.pem

# Enable elliptic curve cryptography
{% if ansible_distribution_release == "stretch" %}
smtpd_tls_eecdh_grade = ultra
{% else %}
smtpd_tls_eecdh_grade = auto
tls_eecdh_auto_curves = {{ mailserver_ssl_eccurves|join(' ') }}
{% endif %}

# Enable session resumption
smtpd_tls_session_cache_database = btree:/var/lib/postfix/smtpd_scache
smtpd_tls_session_cache_timeout = 3600s

{% if mailserver_behind_proxy %}
smtp_dns_support_level = dnssec
smtp_tls_security_level = may
{% else %}
# DANE client. DANE server is *a lot more* work
smtp_dns_support_level = dnssec
smtp_tls_security_level = dane
{% endif %}

# Due to historic reasons, Postfix only uses LDAP to resolve users. To
# actually check their credentials, we need SASL, which is used as a
# mechanism to tell connect to Dovecot to check the credentials...
smtpd_sasl_type = dovecot
smtpd_sasl_path = private/auth

# Disable auth per default for SMTP client
smtp_sasl_auth_enable = no
# Enable auth per default for SMTP server, disabled via override for port 25
smtpd_sasl_auth_enable = yes

# Write into the header of each mail who authenticated it. Makes tracing
# local spam so much easier
smtpd_sasl_authenticated_header = yes

# Check the client's sender adress to match the adresses it may actually
# send mail for
smtpd_sender_login_maps = mysql:/etc/postfix/mysql-senders.cf

# Limit mail size to 50 MB
message_size_limit = 52428800
# Limit mailbox size to 500 MB. This is not actually used, but Postfix has
# a 'sanity check' that complains if you do not also set the mailbox size
# limit. The real limit is set and enforced by dovecot...
mailbox_size_limit = 524288000

# vrfy can be used to check if a mail adress exists, so disable it
disable_vrfy_command = yes

# Delay reject so that spamming mailservers take more time...
smtpd_delay_reject=yes

# Limit header size to 50 KB to make mailserver DoS harder
header_size_limit = 51200

# Stop accepting mails if free disk space in queue dir is less than 500 MB
queue_minfree = 524288000

# Limit the number of concurrent connections per client
smtpd_client_connection_count_limit = 10
smtpd_client_connection_rate_limit = 30

# Limit the number of simultanious recipients
smtpd_recipient_limit = 10

# Disable ERTN. Otherwise everybody can try to flush the queue...
smtpd_etrn_restrictions=reject

# Set timeouts for different queuing stages
delay_warning_time=3h
maximal_queue_lifetime=2d
bounce_queue_lifetime=1d

{% if mailserver_behind_proxy %}
# We're behind a forwaring proxy that does antispam. Mails therefore do not get delivered to us
# from their original sender, therefore, we can't do DNS checks!

# smtpd sender restrictions
smtpd_sender_restrictions = reject_sender_login_mismatch,
  permit_sasl_authenticated, permit_mynetworks, reject_unauth_destination,
  reject_non_fqdn_sender, reject_non_fqdn_recipient, reject_unknown_recipient_domain,
  reject_unauth_pipelining, permit

# smtp destination restrictions
# Either you're authenticated OR you are from 127.0.0.1 OR you satisfy a boatload of constraints
# Also note that the same thing ist in master.cf without sasl restrictions
smtpd_recipient_restrictions = reject_sender_login_mismatch, permit_sasl_authenticated,
  permit_mynetworks, reject_unknown_recipient_domain, reject_unauth_pipelining,
  reject_unauth_destination, reject_multi_recipient_bounce, permit
{% else %}
# smtpd sender restrictions
smtpd_sender_restrictions = reject_sender_login_mismatch,
  permit_sasl_authenticated, permit_mynetworks, reject_unauth_destination,
  reject_non_fqdn_sender, reject_non_fqdn_recipient, reject_unknown_recipient_domain,
  reject_unauth_pipelining, permit

# smtp destination restrictions
# Either you're authenticated OR you are from 127.0.0.1 OR you satisfy a boatload of constraints
# We need to find out in prod if this is too restrictive
# Also note that the same thing ist in master.cf without sasl restrictions
smtpd_recipient_restrictions = reject_sender_login_mismatch, permit_sasl_authenticated,
  permit_mynetworks, reject_invalid_hostname, reject_non_fqdn_hostname,
  reject_non_fqdn_recipient, reject_non_fqdn_sender, reject_unknown_sender_domain,
  reject_unknown_recipient_domain, reject_unauth_pipelining, reject_unauth_destination,
  reject_multi_recipient_bounce, reject_non_fqdn_helo_hostname, reject_invalid_helo_hostname, permit
{% endif %}

# DKIM is implemented by 'miltering' mail, that is sending mail through an external processing
# script. We could also insert some DKIM tool into the LMTP pipeline, but this approache seems
# to be more clean.
milter_default_action = accept
milter_protocol   = 6
smtpd_milters     = inet:127.0.0.1:42420
non_smtpd_milters = inet:127.0.0.1:42420

{% if ansible_local['mailserver_have_antispam']|default(False) %}
# Pass incoming messages through amavis for virus checks
# Spamassassin is done elsewhere
content_filter = amavisfeed:[127.0.0.1]:10024
# Remove repeated Received headers from amavis
header_checks = pcre:/etc/postfix/cleanup-headers
{% endif %}

# Alias maps
# See http://serverfault.com/a/644393/371842 as to why we need virtual_
virtual_alias_maps = mysql:/etc/postfix/mysql-aliases.cf
# Do not load normal aliases...
alias_maps =

# Check users against LDAP. This is necessary to reject invalid users at SMTP time.
# If we don't do this, Postifx would only figure out that a user does not exist when
# handing the mail over to Dovecot via LMTP, at which point the original SMTP connection
# would already be closed, leading to a bounce from *this* mailserver.
local_recipient_maps = proxy:ldap:/etc/postfix/ldap-map.cf

# ADDRESS EXTENSIONS (e.g., user+foo)
#
# The recipient_delimiter parameter specifies the separator between
# user names and address extensions (user+foo). See canonical(5),
# local(8), relocated(5) and virtual(5) for the effects this has on
# aliases, canonical, virtual, relocated and .forward file lookups.
# Basically, the software tries user+foo and .forward+foo before
# trying user and .forward.
#
# This will be required for mailman and is useful for custom sieve scripts
recipient_delimiter = +


# Disabled features that are in the main config file per default
# relay_recipient_maps = hash:/etc/postfix/relay_recipients
# home_mailbox = Mailbox
# home_mailbox = Maildir/
# mail_spool_directory = /var/mail
# mail_spool_directory = /var/spool/mail
# mailbox_command = /usr/bin/procmail
# mailbox_command = /usr/bin/procmail -a "$EXTENSION"
# fallback_transport = lmtp:unix:/file/name
# fallback_transport = cyrus
# fallback_transport =
# luser_relay = $user@other.host
# luser_relay = $local@other.host
# luser_relay = admin+$local
# debug_peer_level = 2
# debug_peer_list = 127.0.0.1
# debug_peer_list = some.domain
