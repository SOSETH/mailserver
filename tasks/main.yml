---
  - name: Install mail server software
    become: True
    apt: name={{item}} state=latest update_cache=yes cache_valid_time=1800
    with_items:
      - postfix
      - postfix-ldap
      - postfix-mysql
      - postfix-pcre
      - opendkim
      - opendkim-tools
      - dovecot-core
      - dovecot-ldap
      - dovecot-imapd
      - dovecot-lmtpd
      - dovecot-pop3d
      - dovecot-mysql
      - dovecot-sieve
      - dovecot-managesieved

  - name: Ensure vmail group exists
    become: True
    group:
      name: "{{ mailserver_mailbox_group }}"
      system: yes

  - name: Ensure vmail user exists
    become: True
    user:
      name: "{{ mailserver_mailbox_user }}"
      shell: /bin/bash
      system: yes
      createhome: no
      home: "{{ mailserver_mailbox_home }}"
      group: "{{ mailserver_mailbox_group }}"

  - name: Ensure vmail user's home exists
    become: True
    file:
      path: "{{ mailserver_mailbox_home }}"
      state: directory
      owner: "{{ mailserver_mailbox_user }}"
      group: "{{ mailserver_mailbox_group }}"
      mode: 0755

  - name: Ensure mail storage exists
    become: True
    file:
      path: "{{ mailserver_mailbox_dir }}"
      state: directory
      owner: "{{ mailserver_mailbox_user }}"
      group: "{{ mailserver_mailbox_group }}"
      mode: 0770

  - name: Ensure mail attachement storage exists
    become: True
    file:
      path: "{{ mailserver_mailbox_attachement_dir }}"
      state: directory
      owner: "{{ mailserver_mailbox_user }}"
      group: "{{ mailserver_mailbox_group }}"
      mode: 0770

  - name: Concat certificates
    become: True
    when: mailserver_have_mailman
    shell: "cat /etc/haproxy/lmtp-cl.crt /etc/haproxy/lmtp-cl.key > /etc/haproxy/lmtp-cl-full.pem"
    changed_when: False

  - name: Configure LMTP HAproxy dropin
    become: True
    when: mailserver_have_mailman
    template:
      src: lmtp.conf.j2
      dest: /etc/haproxy/conf.d/20-lmtp.conf
      owner: root
      group: root
      mode: 0644
    notify: restart haproxy

  - name: Create SSH keys
    include: ssh.yml
    when: groups[mailserver_group]|length > 1

  # Feel free to clean the command up...
  - name: Load postfix version
    shell: postconf -d | grep 'mail_version =' | awk -F= '{print $2}' | sed 's/ //g'
    register: mailserver_postfix_version
    changed_when: False
    tags: postfix

  - name: Configure postfix
    become: True
    template: src='postfix/{{item}}.j2' dest='/etc/postfix/{{item}}' owner=root group=root mode=0644
    with_items:
      - main.cf
      - master.cf
      - dynamicmaps.cf
      - cleanup-headers
      - ldap-map.cf
    notify:
      - restart postfix
    tags: postfix

  - name: Configure postfix (MySQL config)
    become: True
    when: mailserver_config_method == "mysql"
    template: src='postfix/{{item}}.j2' dest='/etc/postfix/{{item}}' owner=root group=root mode=0644
    with_items:
      - mysql-aliases.cf
      - mysql-senders.cf
      - mysql-vdomains.cf
      - mysql-transport.cf
    notify:
      - restart postfix
    tags: postfix

  - name: Configure postfix (LDAP config)
    become: True
    when: mailserver_config_method == "ldap"
    template: src='postfix/{{item}}.j2' dest='/etc/postfix/{{item}}' owner=root group=root mode=0644
    with_items:
      - ldap-aliases.cf
      - ldap-senders.cf
      - ldap-vdomains.cf
      - ldap-transport.cf
    notify:
      - restart postfix
    tags: postfix

  - name: Upload postfix startup chroot helper script
    become: True
    when: mailserver_config_method == "ldap"
    template:
      src: postfix/dropin.sh.j2
      dest: /etc/postfix/chroot-helper.sh
      owner: root
      group: root
      mode: 0750
    notify: restart postfix

  - name: Create postfix startup dropin directory
    become: True
    when: mailserver_config_method == "ldap"
    file:
      path: /etc/systemd/system/postfix@.service.d
      state: directory
      owner: root
      group: root
      mode: 0644

  - name: Upload postfix startup dropin
    become: True
    when: mailserver_config_method == "ldap"
    template:
      src: postfix/dropin.conf.j2
      dest: /etc/systemd/system/postfix@.service.d/ansible.conf
      owner: root
      group: root
      mode: 0644
    notify: reload systemd-postfix

  - name: Handle TLS
    include: tls.yml

  - name: Load dovecot version
    become: True
    command: dovecot --version
    register: mailserver_dove_version
    changed_when: False

  - name: Configure dovecot
    become: True
    template: src='dovecot/{{item}}.j2' dest='/etc/dovecot/{{item}}' owner=root group=dovecot mode=0644
    with_items:
      - dovecot.conf
      - dovecot-ldap.conf.ext
      - dovecot-sql.conf.ext
    notify: restart dovecot

  - name: Install dovecot script
    become: True
    template: src='dovecot/{{ item }}.j2' dest='/etc/dovecot/{{ item }}' owner=root group=dovecot mode=0755
    notify: restart dovecot
    with_items:
      - quota-warning.sh

  - name: Create sieve directories
    become: True
    file: path='{{ item }}' owner={{ mailserver_mailbox_user }} group=dovecot mode=0755 state=directory
    with_items:
      - /etc/dovecot/sieve

  # These scripts are intentionally unwritable for their owner
  - name: Install sieve scripts
    become: True
    template: src='dovecot/sieve/{{ item }}.j2' dest='/etc/dovecot/sieve/{{ item }}' owner={{ mailserver_mailbox_user }} group=dovecot mode=0444
    notify: restart dovecot
    with_items:
      - report-ham.sieve
      - report-spam.sieve
    when: ansible_local['mailserver_have_antispam']|default(False)
    register: sscripts

  - name: Remove old compiled sieve scripts
    become: True
    shell: rm /etc/dovecot/sieve/*.svbin
    failed_when: False
    args:
      warn: False
    when: sscripts.changed

  # Per spec, /var/run is not necessarily persistent. Therefore we need to
  # to create the socket directory before each launch
  - name: Create systemd dovecot drop-in directory
    become: True
    file: path=/etc/systemd/system/dovecot.service.d state=directory owner=root group=root mode=0744
    notify: reload systemd-dovecot

  - name: Create systemd dovecot drop-in
    become: True
    template: src=dovecot/dropin.j2 dest=/etc/systemd/system/dovecot.service.d/ansible.conf owner=root group=root mode=0644
    notify: reload systemd-dovecot

  # This is recommended (ahead-of-time compile) but buggy ATM :(
  #- name: Compile sieve scripts
  #  become: True
  #  command: sievec "/etc/dovecot/sieve/{{ item }}"
  #  notify: restart dovecot
  #  with_items:
  #    - report-ham.sieve
  #    - report-spam.sieve

  - name: Configure dovecot features
    become: True
    template: src='dovecot/conf.d/{{item}}.j2' dest='/etc/dovecot/conf.d/{{item}}' owner=root group=dovecot mode=0644
    with_items:
      - 10-auth.conf
      - 10-logging.conf
      - 10-mail.conf
      - 10-master.conf
      - 10-ssl.conf
      - 15-lda.conf
      - 15-mailboxes.conf
      - 20-imap.conf
      - 20-lmtp.conf
      - 20-pop3.conf
      - 20-managesieve.conf
      - 30-replication.conf
      - 90-acl.conf
      - 90-plugin.conf
      - 90-quota.conf
      - 90-sieve.conf
      - auth-ldap.conf.ext
      - auth-passwdfile.conf.ext
    notify: restart dovecot

  - name: Create dovecot dummy users for antispam integration
    become: True
    template: src='dovecot/{{item}}.j2' dest='/etc/dovecot/{{item}}' owner=root group=dovecot mode=0644
    with_items:
      - users
    when: ansible_local['mailserver_have_antispam']|default(False)

  # This removes config files for all dovecot features that we do not use, which makes reading the
  # generated config much less confusing...
  - name: Remove unneeded dovecot config files
    become: True
    notify: restart dovecot
    file: path='/etc/dovecot/{{item}}' state=absent
    with_items:
      - dovecot-dict-auth.conf.ext
      - dovecot-dict-sql.conf.ext

  - name: Remove unneeded dovecot feature config files
    become: True
    notify: restart dovecot
    file: path='/etc/dovecot/conf.d/{{item}}' state=absent
    with_items:
      - 10-director.conf
      - 10-tcpwrapper.conf
      - auth-checkpassword.conf.ext
      - auth-deny.conf.ext
      - auth-dict.conf.ext
      - auth-master.conf.ext
      - auth-sql.conf.ext
      - auth-system.conf.ext
      - auth-vpopmail.conf.ext
      - auth-static.conf.ext
      - 90-sieve-extprograms.conf

  - name: Create OpenDKIM config directory
    become: True
    file: path=/etc/opendkim state=directory owner=opendkim group=root mode=0754

  - name: Create OpenDKIM key directory
    become: True
    file: path=/etc/opendkim/keys state=directory owner=opendkim group=root mode=0740

  - name: Upload DKIM keys
    become: True
    no_log: True
    copy:
      content: "{{ item.privkey }}"
      dest: /etc/opendkim/keys/{{ item.name }}
      owner: opendkim
      group: root
      mode: 0640
    with_items: "{{ mailserver_dkim_domains }}"
    notify: restart opendkim

  - name: Configure OpenDKIM
    become: True
    template: src=opendkim/opendkim.conf.j2 dest=/etc/opendkim.conf owner=root group=opendkim mode=0644
    notify: restart opendkim
    register: debianhack2

  - name: Configure OpenDKIM service
    become: True
    template: src=opendkim/opendkim.j2 dest=/etc/default/opendkim owner=root group=root mode=0644
    notify: restart opendkim
    register: debianhack

  # For reasons I do not understand, the socket is hardcoded in Debian's systemd unit file.
  # The init script in jessie correctly read the settings, on Strech you need to regenerate
  # the unit. I don't know why the unit doesn't load the configuration as an env-file, so the
  # workaround is replicated here.
  - name: Regenerate OpenDKIM service file
    become: True
    when: debianhack.changed or debianhack2.changed
    shell: /lib/opendkim/opendkim.service.generate && systemctl daemon-reload

  - name: Generate OpenDKIM tables
    become: True
    template: src=opendkim/{{item}}.j2 dest=/etc/opendkim/{{item}} owner=root group=opendkim mode=0644
    notify: restart opendkim
    with_items:
      - signtable
      - keytable
